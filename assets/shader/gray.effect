//self defined effect         author:ljw 
CCEffect %{
  techniques:
  - name: game2d-shader
    passes:
    - vert: 2dvs:vert # builtin header
      frag: 2dfs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: &props
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        grayStrong: { value: 1.0 ,range: [0.5,1.0,0.1]}
}%

CCProgram 2dvs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;
  out vec4 color;
  out vec2 uv0;
  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    pos = cc_matViewProj * pos;
    uv0 = a_texCoord;
    color = a_color;
    return pos;
  }
}%

CCProgram 2dfs %{
  precision highp float;
  #include <legacy/output>
  #include <builtin/internal/sprite-texture>
  // #include "./common-fun"

  in vec2 uv0;

  uniform Constant {
    vec4 mainColor;
    float grayStrong;
  };

  vec4 frag () {
    // vec4 col = mainColor * texture(cc_spriteTexture, uv0);
    vec4 o = vec4(139.0/255.0, 139.0/255., 139.0/255.0, 1);
    vec4 src_color = mainColor * texture(cc_spriteTexture, uv0);
    if(src_color.a<0.1) discard;
    float average_color_value = (src_color.r + src_color.g + src_color.b)/3.0;
    vec3 gray_RGB = vec3(average_color_value)*grayStrong;
    vec4 gray_color = vec4(gray_RGB,1.0);
    o *= gray_color;
    return CCFragOutput(o);
  }
}%
